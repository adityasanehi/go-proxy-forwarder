name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" = "linux" ]; then
          # Install cross-compilation tools for Linux
          sudo apt-get update
          sudo apt-get install -y gcc-multilib
          if [ "${{ matrix.goarch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            export CC=aarch64-linux-gnu-gcc
          fi
        elif [ "${{ matrix.goos }}" = "windows" ]; then
          # Install mingw for Windows cross-compilation
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64
          export CC=x86_64-w64-mingw32-gcc
        elif [ "${{ matrix.goos }}" = "darwin" ]; then
          # For macOS, we'll disable CGO to avoid cross-compilation issues
          export CGO_ENABLED=0
        fi
        
        # Create output directory
        mkdir -p dist
        
        # Build the binary
        go build -ldflags="-s -w" -o dist/go-proxy-forwarder-${{ matrix.suffix }} .

    - name: Create release package
      run: |
        cd dist
        
        # Debug: List current contents
        echo "Current directory contents:"
        ls -la
        
        # Define package directory name
        PACKAGE_DIR="go-proxy-forwarder-${{ matrix.suffix }}-package"
        
        # Clean up any existing directory
        rm -rf "${PACKAGE_DIR}"
        
        # Create package directory
        mkdir -p "${PACKAGE_DIR}"
        
        # Copy binary
        cp "go-proxy-forwarder-${{ matrix.suffix }}" "${PACKAGE_DIR}/"
        
        # Copy additional files (check if they exist first)
        [ -f ../README.md ] && cp ../README.md "${PACKAGE_DIR}/" || echo "README.md not found"
        [ -f ../sample_proxies.txt ] && cp ../sample_proxies.txt "${PACKAGE_DIR}/" || echo "sample_proxies.txt not found"
        [ -d ../static ] && cp -r ../static "${PACKAGE_DIR}/" || echo "static directory not found"
        
        # Debug: Show package contents
        echo "Package contents:"
        ls -la "${PACKAGE_DIR}/"
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r "go-proxy-forwarder-${{ matrix.suffix }}.zip" "${PACKAGE_DIR}"
        else
          tar -czf "go-proxy-forwarder-${{ matrix.suffix }}.tar.gz" "${PACKAGE_DIR}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-proxy-forwarder-${{ matrix.suffix }}
        path: |
          dist/go-proxy-forwarder-${{ matrix.suffix }}.tar.gz
          dist/go-proxy-forwarder-${{ matrix.suffix }}.zip
        retention-days: 30
        if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
        ls -la release-assets/

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ${{ steps.tag.outputs.tag }}
        body: |
          ## Go Proxy Forwarder ${{ steps.tag.outputs.tag }}
          
          ### Features
          - ðŸ”„ Smart proxy rotation with health monitoring
          - ðŸ“¤ Web interface for proxy list uploads
          - ðŸ’¾ SQLite database for persistent storage
          - ðŸ”§ REST API for proxy management
          - ðŸ“Š Real-time statistics and health metrics
          
          ### Downloads
          Choose the appropriate binary for your platform:
          
          - **Linux AMD64**: `go-proxy-forwarder-linux-amd64.tar.gz`
          - **Linux ARM64**: `go-proxy-forwarder-linux-arm64.tar.gz`
          - **Windows AMD64**: `go-proxy-forwarder-windows-amd64.exe.zip`
          - **macOS Intel**: `go-proxy-forwarder-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `go-proxy-forwarder-darwin-arm64.tar.gz`
          
          ### Quick Start
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Run the executable: `./go-proxy-forwarder` (or `go-proxy-forwarder.exe` on Windows)
          4. Open `http://localhost:3000` in your browser
          
          ### Configuration
          Set environment variables to customize the application:
          - `PORT=3000` - Server port
          - `DATABASE_PATH=./proxies.db` - Database file path
          - `MAX_FILE_SIZE=10485760` - Max upload file size (10MB)
          
          See the README.md for detailed usage instructions.
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}