name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.0.0'

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install cross-compilation tools
      if: matrix.goarch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      env:
        GOOS: linux
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
        CC: ${{ matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/go-proxy-forwarder-linux-${{ matrix.goarch }} .
        
        # Create package
        PACKAGE_DIR="go-proxy-forwarder-linux-${{ matrix.goarch }}-package"
        mkdir -p dist/${PACKAGE_DIR}
        cp dist/go-proxy-forwarder-linux-${{ matrix.goarch }} dist/${PACKAGE_DIR}/
        [ -f README.md ] && cp README.md dist/${PACKAGE_DIR}/
        [ -f sample_proxies.txt ] && cp sample_proxies.txt dist/${PACKAGE_DIR}/
        [ -d static ] && cp -r static dist/${PACKAGE_DIR}/
        
        cd dist
        tar -czf go-proxy-forwarder-linux-${{ matrix.goarch }}.tar.gz ${PACKAGE_DIR}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-proxy-forwarder-linux-${{ matrix.goarch }}
        path: dist/go-proxy-forwarder-linux-${{ matrix.goarch }}.tar.gz

  build-windows:
    name: Build Windows
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64

    - name: Build binary
      env:
        GOOS: windows
        GOARCH: amd64
        CGO_ENABLED: 1
        CC: x86_64-w64-mingw32-gcc
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/go-proxy-forwarder-windows-amd64.exe .
        
        # Create package
        PACKAGE_DIR="go-proxy-forwarder-windows-amd64.exe-package"
        mkdir -p dist/${PACKAGE_DIR}
        cp dist/go-proxy-forwarder-windows-amd64.exe dist/${PACKAGE_DIR}/
        [ -f README.md ] && cp README.md dist/${PACKAGE_DIR}/
        [ -f sample_proxies.txt ] && cp sample_proxies.txt dist/${PACKAGE_DIR}/
        [ -d static ] && cp -r static dist/${PACKAGE_DIR}/
        
        cd dist
        zip -r go-proxy-forwarder-windows-amd64.exe.zip ${PACKAGE_DIR}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-proxy-forwarder-windows-amd64.exe
        path: dist/go-proxy-forwarder-windows-amd64.exe.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binary
      env:
        GOOS: darwin
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/go-proxy-forwarder-darwin-${{ matrix.goarch }} .
        
        # Create package
        PACKAGE_DIR="go-proxy-forwarder-darwin-${{ matrix.goarch }}-package"
        mkdir -p dist/${PACKAGE_DIR}
        cp dist/go-proxy-forwarder-darwin-${{ matrix.goarch }} dist/${PACKAGE_DIR}/
        [ -f README.md ] && cp README.md dist/${PACKAGE_DIR}/
        [ -f sample_proxies.txt ] && cp sample_proxies.txt dist/${PACKAGE_DIR}/
        [ -d static ] && cp -r static dist/${PACKAGE_DIR}/
        
        cd dist
        tar -czf go-proxy-forwarder-darwin-${{ matrix.goarch }}.tar.gz ${PACKAGE_DIR}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go-proxy-forwarder-darwin-${{ matrix.goarch }}
        path: dist/go-proxy-forwarder-darwin-${{ matrix.goarch }}.tar.gz

  release:
    name: Create Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
        ls -la release-assets/

    - name: Get tag name
      id: tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: ${{ steps.tag.outputs.tag }}
        body: |
          ## Go Proxy Forwarder ${{ steps.tag.outputs.tag }}
          
          ### Features
          - ðŸ”„ Smart proxy rotation with health monitoring
          - ðŸ“¤ Web interface for proxy list uploads
          - ðŸ’¾ SQLite database for persistent storage
          - ðŸ”§ REST API for proxy management
          - ðŸ“Š Real-time statistics and health metrics
          
          ### Downloads
          Choose the appropriate binary for your platform:
          
          - **Linux AMD64**: `go-proxy-forwarder-linux-amd64.tar.gz`
          - **Linux ARM64**: `go-proxy-forwarder-linux-arm64.tar.gz`
          - **Windows AMD64**: `go-proxy-forwarder-windows-amd64.exe.zip`
          - **macOS Intel**: `go-proxy-forwarder-darwin-amd64.tar.gz`
          - **macOS Apple Silicon**: `go-proxy-forwarder-darwin-arm64.tar.gz`
          
          ### Quick Start
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Run the executable: `./go-proxy-forwarder` (or `go-proxy-forwarder.exe` on Windows)
          4. Open `http://localhost:3000` in your browser
          
          ### Configuration
          Set environment variables to customize the application:
          - `PORT=3000` - Server port
          - `DATABASE_PATH=./proxies.db` - Database file path
          - `MAX_FILE_SIZE=10485760` - Max upload file size (10MB)
          
          See the README.md for detailed usage instructions.
        files: release-assets/*
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}